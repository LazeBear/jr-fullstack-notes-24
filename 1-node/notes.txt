Mason

Cursor, Windsurf



jest + supertest



Bun
Deno

Ecosystem


asynchronous - non-blocking
synchronous - blocking

I/O input/output


event driven

document.addEventListener('click', ()=>{})


single threaded

process thread

cpu core
1 core -> 1 chief -> 切菜，做饭（多线程）
只切菜（单线程）
线程-》厨师干的事情


event loop

jQuery




function foo() {
  console.log('foo');
}

function runFor1Sec() {
  // need 1 sec to run
}

setTimeout(foo, 100);
runFor1Sec();
console.log("hi");


0ms
Call stack
[]
web api
[]
callback queue
[]

1ms
Call stack
[setTimeout]
web api
[]
callback queue
[]

2ms
Call stack
[]
web api
[timer - 100ms]
callback queue
[]

3ms
Call stack
[runFor1Sec - 1000ms]
web api
[timer - 99ms]
callback queue
[]

102ms
call stack
[runFor1Sec - 1000ms]
web api
[]
callback queue
[timer]

1003ms
call stack
[]
web api
[]
callback queue
[timer]

1004ms
call stack
[console.log]
web api
[]
callback queue
[timer]

1005ms
call stack
[timer]
web api
[]
callback queue
[]

exectution context 执行上下文


asynchronous

callback function -> callback queue -> macro task queue 宏任务
promise - async/await -> micro task queue 微任务

micro > macro


event loop pick order

nextTick
micro task
promise


macro task
setTimeout, setInterval, i/o, setImmediate





function foo(cb) {
  cb();
  setTimeout(()=>{cb()});
}

foo(()=>{})




browser -> window
node.js -> globalThis (global)

setTimeout


module


ESM (ES Module)
import/export


js
CommonJS
import -> require
export -> module.exports

a.js
function add(){}

module.exports = {add};
module.exports = add;

b.js
const {add} = require('./a'); (use relative path - your module)
cosnt add = require();

ts -> ESM

